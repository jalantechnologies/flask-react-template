name: preview_on_pr_update

on:
  pull_request:
    types: [ opened, synchronize, reopened ]

jobs:
  preview:
    # only run when updating an 'Open' PR
    if: github.event.pull_request.state == 'open'
    uses: jalantechnologies/github-ci/.github/workflows/ci.yml@v2.5
    concurrency:
      group: ci-preview-${{ github.event.pull_request.head.ref }}
      cancel-in-progress: true
    with:
      analyze_base: main
      app_name: frm-boilerplate
      app_env: preview
      app_hostname: '{1}.preview.platform.jalantechnologies.com'
      branch: ${{ github.event.pull_request.head.ref }}
      build_args: |
        APP_ENV=preview
      checks: "['npm:coverage', 'npm:lint', 'compose:test']"
      docker_registry: ${{ vars.DOCKER_REGISTRY }}
      docker_username: ${{ vars.DOCKER_USERNAME }}
      pull_request_number: ${{ github.event.number }}
      sonar_host_url: ${{ vars.SONAR_HOST_URL }}
      do_cluster_id: ${{ vars.DO_CLUSTER_ID }}
    secrets:
      docker_password: ${{ secrets.DOCKER_PASSWORD }}
      doppler_token: ${{ secrets.DOPPLER_PREVIEW_TOKEN }}
      do_access_token: ${{ secrets.DO_ACCESS_TOKEN }}
      sonar_token: ${{ secrets.SONAR_TOKEN }}

  deploy_temporal:
   needs: preview
   runs-on: ubuntu-latest
   steps:
    - name: Authenticate with DigitalOcean Kubernetes
      env:
        DO_ACCESS_TOKEN: ${{ secrets.DO_ACCESS_TOKEN }}
      run: |
        echo "$DO_ACCESS_TOKEN" | doctl auth init
        doctl kubernetes cluster kubeconfig save ${{ vars.DO_CLUSTER_ID }}

    - name: Deploy PR-Specific Temporal Pod
      env:
        DO_ACCESS_TOKEN: ${{ secrets.DO_ACCESS_TOKEN }}
      run: |
        # Check if the deployment already exists
        if ! kubectl get deployment temporal-${{ github.event.number }} -n $KUBE_NS; then
        echo "Creating new Temporal deployment..."
        kubectl apply -f lib/kube/preview/temporal-deployment.yaml
        kubectl apply -f lib/kube/preview/temporal-service.yaml
        else
        echo "Temporal deployment already exists. Skipping apply."
        fi

        # Ensure the deployment is up before updating images
        echo "Waiting for Temporal deployment to be ready..."
        kubectl rollout status deployment/temporal-${{ github.event.number }} -n $KUBE_NS --timeout=100s || echo "Warning: Deployment rollout not complete."

        # Update images only if the deployment exists
        if kubectl get deployment temporal-${{ github.event.number }} -n $KUBE_NS; then
         echo "Updating Temporal images..."
         kubectl set image deployment/temporal-${{ github.event.number }} temporal-server=temporalio/auto-setup:latest --namespace=$KUBE_NS
         kubectl set image deployment/temporal-${{ github.event.number }} temporal-ui=temporalio/ui:latest --namespace=$KUBE_NS
         kubectl set image deployment/temporal-${{ github.event.number }} python-worker=$KUBE_DEPLOYMENT_IMAGE --namespace=$KUBE_NS
        else
        echo "Deployment not found, skipping image update."
        fi

