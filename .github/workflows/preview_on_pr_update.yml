name: preview_on_pr_update
# only run when updating an 'Open' PR  # retry fix

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  temporal_schema_setup:
    name: Temporal Schema Setup / Upgrade
    runs-on: ubuntu-latest
    if: github.event.pull_request.state == 'open'

    steps:
      - name: Install Doppler CLI
        uses: dopplerhq/cli-action@v3
        with:
          doppler-token: ${{ secrets.doppler_token }}

      - name: Setup or Upgrade Temporal Schema
        env:
          TEMPORAL_SCHEMA_VERSION: ${{ secrets.TEMPORAL_SCHEMA_VERSION }}
        run: |
          doppler run -- bash -c '
            echo "Target schema version: $TEMPORAL_SCHEMA_VERSION"

            echo "Checking if schema exists.."
            docker run --rm \
              -e DB=postgres12 \
              -e DB_PORT=$DB_PORT \
              -e DB_HOST=$POSTGRES_SEEDS \
              -e DB_USER=$POSTGRES_USER \
              -e DB_PWD=$POSTGRES_PWD \
              -e DB_NAME=$DBNAME \
              -e SQL_TLS=$SQL_TLS \
              -e SQL_TLS_MODE=$SQL_TLS_MODE \
              -e SQL_TLS_SKIP_VERIFY=$SQL_TLS_SKIP_VERIFY \
              temporalio/admin-tools:1.27.2-tctl-1.18 \
              bash -c "
                temporal-sql-tool --ep \$DB_HOST:\$DB_PORT \
                  --db \$DB_NAME --user \$DB_USER --pw \$DB_PWD \
                  validate-schema-version --expected-version \$TEMPORAL_SCHEMA_VERSION
              " && echo "Schema is already up-to-date." && exit 0

            echo "Schema not up-to-date. Running setup or upgrade..."
            docker run --rm \
              -e DB=postgres12 \
              -e DB_PORT=$DB_PORT \
              -e DB_HOST=$POSTGRES_SEEDS \
              -e DB_USER=$POSTGRES_USER \
              -e DB_PWD=$POSTGRES_PWD \
              -e DB_NAME=$DBNAME \
              -e SQL_TLS=$SQL_TLS \
              -e SQL_TLS_MODE=$SQL_TLS_MODE \
              -e SQL_TLS_SKIP_VERIFY=$SQL_TLS_SKIP_VERIFY \
              temporalio/admin-tools:1.27.2-tctl-1.18 \
              bash -c "
                temporal-sql-tool --ep \$DB_HOST:\$DB_PORT \
                  --db \$DB_NAME --user \$DB_USER --pw \$DB_PWD \
                  setup-schema -v 0.0 || true

                temporal-sql-tool --ep \$DB_HOST:\$DB_PORT \
                  --db \$DB_NAME --user \$DB_USER --pw \$DB_PWD \
                  update-schema -v \$TEMPORAL_SCHEMA_VERSION
              "

            echo "Schema updated to version \$TEMPORAL_SCHEMA_VERSION"
          '

  preview:
    # only run when updating an 'Open' PR
    needs: temporal_schema_setup
    if: github.event.pull_request.state == 'open'
    uses: jalantechnologies/github-ci/.github/workflows/ci.yml@temporal-schema-migration-fix
    concurrency:
      group: ci-preview-${{ github.event.pull_request.head.ref }}
      cancel-in-progress: true
    with:
      hosting_provider: ${{ vars.HOSTING_PROVIDER }} # 'DIGITAL_OCEAN' or 'AWS'
      analyze_base: main
      app_name: frm-boilerplate
      app_env: preview
      app_hostname: '{1}.preview.platform.bettrhq.com'
      branch: ${{ github.event.pull_request.head.ref }}
      build_args: |
        APP_ENV=preview
      checks: "['npm:coverage', 'npm:lint', 'compose:test']"
      docker_registry: ${{ vars.DOCKER_REGISTRY }}
      docker_username: ${{ vars.DOCKER_USERNAME }}
      aws_cluster_name: ${{ vars.AWS_CLUSTER_NAME }}
      aws_region: ${{ vars.AWS_REGION }}
      pull_request_number: ${{ github.event.number }}
      sonar_host_url: ${{ vars.SONAR_HOST_URL }}
      do_cluster_id: ${{ vars.DO_CLUSTER_ID }}
    secrets:
      docker_password: ${{ secrets.DOCKER_PASSWORD }}
      doppler_token: ${{ secrets.DOPPLER_PREVIEW_TOKEN }}
      aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      do_access_token: ${{ secrets.DO_ACCESS_TOKEN }}
      sonar_token: ${{ secrets.SONAR_TOKEN }}
      TEMPORAL_SCHEMA_VERSION: ${{ secrets.TEMPORAL_SCHEMA_VERSION }}
