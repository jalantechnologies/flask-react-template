apiVersion: apps/v1
kind: Deployment
metadata:
  name: $KUBE_APP-temporal-deployment
  namespace: $KUBE_NS
  labels:
    app: temporal
    version: $GITHUB_SHA
  annotations:
    secrets.doppler.com/reload: 'true'
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
  selector:
    matchLabels:
      app: temporal
  template:
    metadata:
      labels:
        app: temporal
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: doks.digitalocean.com/node-pool
                    operator: In
                    values:
                      - platform-cluster-01-staging-pool
      imagePullSecrets:
        - name: regcred

      # Add initContainer to handle DB schema upgrades before Temporal starts
      initContainers:
      - name: temporal-schema-upgrade
        image: temporalio/admin-tools:1.27.2-tctl-1.18
        command: ["/bin/sh", "-c"]
        args:
          - |
              echo "Exporting environment variables..."
              export $(env | grep -v '^_' | cut -d= -f1 | xargs)

              echo "Checking and upgrading schema for DB: ${DBNAME}"
              if [ -z "${DBNAME}" ]; then
                echo "DBNAME is not set. Skipping schema upgrade."
                exit 0
              fi

              echo "Setting up schema (if not already present)..."
              temporal-sql-tool \
                --plugin ${DB} \
                --ep "${POSTGRES_SEEDS}" \
                -u "${POSTGRES_USER}" \
                -pw "${POSTGRES_PWD}" \
                -p "${DB_PORT}" \
                --db "${DBNAME}" \
                --tls="${POSTGRES_TLS_ENABLED}" \
                --tls-disable-host-verification="${POSTGRES_TLS_DISABLE_HOST_VERIFICATION}" \
                --tls-cert-file "${POSTGRES_TLS_CERT_FILE}" \
                --tls-key-file "${POSTGRES_TLS_KEY_FILE}" \
                --tls-ca-file "${POSTGRES_TLS_CA_FILE}" \
                --tls-server-name "${POSTGRES_TLS_SERVER_NAME}" \
                setup-schema -v 0.0 || echo "Schema already exists."

              echo "Applying schema upgrades..."
              temporal-sql-tool \
                --plugin ${DB} \
                --ep "${POSTGRES_SEEDS}" \
                -u "${POSTGRES_USER}" \
                -pw "${POSTGRES_PWD}" \
                -p "${DB_PORT}" \
                --db "${DBNAME}" \
                --tls="${POSTGRES_TLS_ENABLED}" \
                --tls-disable-host-verification="${POSTGRES_TLS_DISABLE_HOST_VERIFICATION}" \
                --tls-cert-file "${POSTGRES_TLS_CERT_FILE}" \
                --tls-key-file "${POSTGRES_TLS_KEY_FILE}" \
                --tls-ca-file "${POSTGRES_TLS_CA_FILE}" \
                --tls-server-name "${POSTGRES_TLS_SERVER_NAME}" \
                update-schema -d "/etc/temporal/schema/postgresql/v12/temporal/versioned" || {
                  echo "Schema upgrade failed"
                  exit 1
                }

              echo "Schema upgrade completed successfully"

        envFrom:
          - secretRef:
              name: $DOPPLER_MANAGED_SECRET_NAME
        resources:
          requests:
            memory: "100Mi"
          limits:
            memory: "200Mi"

      containers:
        - name: temporal-server
          image: temporalio/server:1.27.2
          imagePullPolicy: Always
          ports:
            - containerPort: 7233
          envFrom:
            - secretRef:
                name: $DOPPLER_MANAGED_SECRET_NAME
          resources:
            requests:
              memory: '200Mi'
            limits:
              memory: '400Mi'
        - name: temporal-admin-tools
          image: temporalio/admin-tools:1.27.2-tctl-1.18
          imagePullPolicy: Always
          envFrom:
            - secretRef:
                name: $DOPPLER_MANAGED_SECRET_NAME
          stdin: true
          tty: true
          resources:
            requests:
              memory: '100Mi'
            limits:
              memory: '200Mi'

        - name: temporal-ui
          image: temporalio/ui:2.37.2
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
          envFrom:
            - secretRef:
                name: $DOPPLER_MANAGED_SECRET_NAME
          resources:
            requests:
              memory: '200Mi'
            limits:
              memory: '400Mi'
          startupProbe:
            httpGet:
              path: /
              port: 8080
            failureThreshold: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 10
            periodSeconds: 10
            failureThreshold: 5

        - name: python-worker
          image: $KUBE_DEPLOYMENT_IMAGE
          workingDir: /opt/app/src/apps/backend
          command: ['pipenv', 'run', 'python', 'temporal_server.py']
          envFrom:
            - secretRef:
                name: $DOPPLER_MANAGED_SECRET_NAME
          resources:
            requests:
              memory: '150Mi'
            limits:
              memory: '300Mi'
